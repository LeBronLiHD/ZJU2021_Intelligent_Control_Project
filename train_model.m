function augmenter = train_model(layers, imdsTrain, imdsValid, width, height, epoch, learning_rate, mode, valid_freq)

% generate data
augmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandRotation',[-30 30],...
    'RandXScale',[1 4], ...
    'RandYReflection',true, ...
    'RandYScale',[1 4]);
imageSize = [width, height, 3];
datastore = augmentedImageDatastore(imageSize,...
    imdsTrain,...
    'DataAugmentation', augmenter);
datastore_valid = augmentedImageDatastore(imageSize,...
    imdsValid,...
    'DataAugmentation', augmenter);

% config training
options = trainingOptions('sgdm', ...
    'MaxEpochs',epoch,... % 'MiniBatchSize',32,...
    'InitialLearnRate',learning_rate, ...
    'Verbose',1, ...
    'VerboseFrequency',valid_freq, ...
    'ValidationData',datastore_valid,...
    'ValidationFrequency',valid_freq,...
    'ExecutionEnvironment','parallel',...
    'Plots','training-progress');

% start training
FlowerNet = trainNetwork(datastore,layers,options);
analyzeNetwork(FlowerNet);

if mode == 1
    save('FlowerCNNNet.mat', 'FlowerNet');
    disp("cnn model training done!");
end
if mode == 2
    save('FlowerAlexNet.mat', 'FlowerNet')
    disp("alex model training done!");
end

end